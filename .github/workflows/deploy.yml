name: Deploy

on:
  workflow_run:
    workflows: [ "CI" ]
    types:
      - completed
    branches-ignore:
      - '**'
    tags:
      - '*'

jobs:
  build-and-deploy-api:
    # Only run this job if the "CI" workflow is successful and a new tag was pushed
    if: ${{ github.event.workflow_run.conclusion == 'success' && contains(github.event.workflow_run.head_commit.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v1
        with:
          registry: registry.digitalocean.com
          username: _token
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        with:
          file: ./api/Dockerfile
          context: ./api
          push: true
          tags: registry.digitalocean.com/floumy-registry/api:latest
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            doctl registry login
            docker pull registry.digitalocean.com/floumy-registry/api:latest
            docker stop api || true
            docker rm api || true
            docker run --network host -d --restart=always --name api -e FRONTEND_URL=https://app.floumy.com -e DB_HOST=${{ secrets.DB_HOST }} -e DB_PORT=${{ secrets.DB_PORT }} -e DB_USERNAME=${{ secrets.DB_USERNAME }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_DATABASE=${{ secrets.DB_DATABASE }} -e DB_SSL=${{ secrets.DB_SSL }} -e DB_SSL_CERTIFICATE="${{ secrets.DB_SSL_CERTIFICATE }}" -e SPACES_KEY=${{ secrets.SPACES_KEY }} -e SPACES_SECRET=${{ secrets.SPACES_SECRET }} -e SPACES_ENDPOINT=${{ secrets.SPACES_ENDPOINT }} -e SPACES_REGION=${{ secrets.SPACES_REGION }} -e SPACES_FORCE_PATH_STYLE=${{ secrets.SPACES_FORCE_PATH_STYLE }} -e SPACES_BUCKET=${{ secrets.SPACES_BUCKET }} -e MAIL_USER=${{ secrets.MAIL_USER }} -e POSTMARK_API_KEY=${{ secrets.POSTMARK_API_KEY }} -e JWT_SECRET=${{ secrets.JWT_SECRET }} -e STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }} -e STRIPE_SUCCESS_URL=${{ secrets.STRIPE_SUCCESS_URL }} -e STRIPE_CANCEL_URL=${{ secrets.STRIPE_CANCEL_URL }} -e STRIPE_BUILD_IN_PRIVATE_PRICE_ID=${{ secrets.STRIPE_BUILD_IN_PRIVATE_PRICE_ID }} -e STRIPE_BUILD_IN_PUBLIC_PRICE_ID=${{ secrets.STRIPE_BUILD_IN_PUBLIC_PRICE_ID }} -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} -p 4000:8080 registry.digitalocean.com/floumy-registry/api:latest
            docker image prune -f

  build-and-deploy-web:
    # Only run this job if the "CI" workflow is successful and a new tag was pushed
    if: ${{ github.event.workflow_run.conclusion == 'success' && contains(github.event.workflow_run.head_commit.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v1
        with:
          registry: registry.digitalocean.com
          username: _token
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          file: ./web/Dockerfile
          context: ./web
          push: true
          build-args: |
            REACT_APP_API_URL=https://api.floumy.com
          tags: registry.digitalocean.com/floumy-registry/web-app:latest

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP_WEB }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            doctl registry login
            docker pull registry.digitalocean.com/floumy-registry/web-app:latest
            docker stop web-app || true
            docker rm web-app || true
            docker run -d --restart=always --name web-app -p 3000:80 registry.digitalocean.com/floumy-registry/web-app:latest
            docker image prune -f
